// <auto-generated />
using System;
using Fleet.Parts.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Fleet.Parts.Migrations
{
    [DbContext(typeof(FleetPartsDbContext))]
    partial class FleetPartsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Fleet.Parts.Data.Part", b =>
                {
                    b.Property<string>("UPC")
                        .HasMaxLength(31)
                        .HasColumnType("nvarchar(31)");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(127)
                        .HasColumnType("nvarchar(127)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1023)
                        .HasColumnType("nvarchar(1023)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(127)
                        .HasColumnType("nvarchar(127)");

                    b.Property<string>("PartTypeName")
                        .IsRequired()
                        .HasMaxLength(127)
                        .HasColumnType("nvarchar(127)");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasMaxLength(31)
                        .HasColumnType("nvarchar(31)");

                    b.Property<decimal>("StockQty")
                        .HasPrecision(27, 9)
                        .HasColumnType("decimal(27,9)");

                    b.HasKey("UPC");

                    b.HasIndex("PartTypeName");

                    b.ToTable("Parts");
                });

            modelBuilder.Entity("Fleet.Parts.Data.PartCategory", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(127)
                        .HasColumnType("nvarchar(127)");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasMaxLength(524288)
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Name");

                    b.ToTable("PartCategories");
                });

            modelBuilder.Entity("Fleet.Parts.Data.PartType", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(127)
                        .HasColumnType("nvarchar(127)");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasMaxLength(524288)
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Name");

                    b.ToTable("PartTypes");
                });

            modelBuilder.Entity("Fleet.Parts.Data.PartTypeCategory", b =>
                {
                    b.Property<string>("PartTypeName")
                        .HasMaxLength(127)
                        .HasColumnType("nvarchar(127)");

                    b.Property<string>("PartCategoryName")
                        .HasMaxLength(127)
                        .HasColumnType("nvarchar(127)");

                    b.Property<string>("SubCategory")
                        .HasMaxLength(127)
                        .HasColumnType("nvarchar(127)");

                    b.HasKey("PartTypeName", "PartCategoryName", "SubCategory");

                    b.HasIndex("PartCategoryName");

                    b.ToTable("PartTypeCategory");
                });

            modelBuilder.Entity("Fleet.Parts.Data.StockEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasMaxLength(31)
                        .HasColumnType("nvarchar(31)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(2047)
                        .HasColumnType("nvarchar(2047)");

                    b.Property<string>("ProvidersInfo")
                        .IsRequired()
                        .HasMaxLength(1023)
                        .HasColumnType("nvarchar(1023)");

                    b.Property<string>("RegisteredBy")
                        .IsRequired()
                        .HasMaxLength(31)
                        .HasColumnType("nvarchar(31)");

                    b.Property<DateTime>("RegisteredDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<decimal>("TotalValue")
                        .HasPrecision(27, 9)
                        .HasColumnType("decimal(27,9)");

                    b.HasKey("Id");

                    b.ToTable("StockEntry");
                });

            modelBuilder.Entity("Fleet.Parts.Data.StockOut", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(31)
                        .HasColumnType("nvarchar(31)");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CancelledBy")
                        .HasMaxLength(31)
                        .HasColumnType("nvarchar(31)");

                    b.Property<DateTime?>("CancelledDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveredBy")
                        .HasMaxLength(31)
                        .HasColumnType("nvarchar(31)");

                    b.Property<DateTime?>("DeliveredDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveredTo")
                        .HasMaxLength(31)
                        .HasColumnType("nvarchar(31)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasMaxLength(31)
                        .HasColumnType("nvarchar(31)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(2047)
                        .HasColumnType("nvarchar(2047)");

                    b.Property<string>("RegisteredBy")
                        .IsRequired()
                        .HasMaxLength(31)
                        .HasColumnType("nvarchar(31)");

                    b.Property<DateTime>("RegisteredDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("RequestedBy")
                        .IsRequired()
                        .HasMaxLength(31)
                        .HasColumnType("nvarchar(31)");

                    b.HasKey("Id");

                    b.ToTable("StockOut");
                });

            modelBuilder.Entity("Fleet.Parts.Data.Part", b =>
                {
                    b.HasOne("Fleet.Parts.Data.PartType", null)
                        .WithMany("Parts")
                        .HasForeignKey("PartTypeName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Fleet.Parts.Data.VehicleVariantFilter", "VariantFilters", b1 =>
                        {
                            b1.Property<string>("PartUPC")
                                .HasColumnType("nvarchar(31)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            b1.Property<int>("VehicleBrandId")
                                .HasColumnType("int");

                            b1.Property<int>("VehicleModelId")
                                .HasColumnType("int");

                            b1.HasKey("PartUPC", "Id");

                            b1.ToTable("Parts");

                            b1.ToJson("VariantFilters");

                            b1.WithOwner()
                                .HasForeignKey("PartUPC");
                        });

                    b.Navigation("VariantFilters");
                });

            modelBuilder.Entity("Fleet.Parts.Data.PartTypeCategory", b =>
                {
                    b.HasOne("Fleet.Parts.Data.PartCategory", "PartCategory")
                        .WithMany("PartTypeCategories")
                        .HasForeignKey("PartCategoryName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fleet.Parts.Data.PartType", "PartType")
                        .WithMany("PartTypeCategories")
                        .HasForeignKey("PartTypeName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PartCategory");

                    b.Navigation("PartType");
                });

            modelBuilder.Entity("Fleet.Parts.Data.StockEntry", b =>
                {
                    b.OwnsMany("Fleet.Parts.Data.DocumentMetadata", "Documents", b1 =>
                        {
                            b1.Property<int>("StockEntryId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(2043)
                                .HasColumnType("nvarchar(2043)");

                            b1.Property<string>("DocumentId")
                                .IsRequired()
                                .HasMaxLength(63)
                                .HasColumnType("nvarchar(63)");

                            b1.Property<string>("FileName")
                                .IsRequired()
                                .HasMaxLength(63)
                                .HasColumnType("nvarchar(63)");

                            b1.Property<string>("MimeType")
                                .IsRequired()
                                .HasMaxLength(31)
                                .HasColumnType("nvarchar(31)");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(63)
                                .HasColumnType("nvarchar(63)");

                            b1.HasKey("StockEntryId", "Id");

                            b1.ToTable("StockEntry");

                            b1.ToJson("Documents");

                            b1.WithOwner()
                                .HasForeignKey("StockEntryId");
                        });

                    b.OwnsMany("Fleet.Parts.Data.StockEntryLine", "Lines", b1 =>
                        {
                            b1.Property<int>("StockEntryId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            b1.Property<string>("PartUPC")
                                .IsRequired()
                                .HasMaxLength(31)
                                .HasColumnType("nvarchar(31)");

                            b1.Property<decimal>("Quantity")
                                .HasPrecision(27, 9)
                                .HasColumnType("decimal(27,9)");

                            b1.HasKey("StockEntryId", "Id");

                            b1.ToTable("StockEntry");

                            b1.ToJson("Lines");

                            b1.WithOwner()
                                .HasForeignKey("StockEntryId");
                        });

                    b.Navigation("Documents");

                    b.Navigation("Lines");
                });

            modelBuilder.Entity("Fleet.Parts.Data.StockOut", b =>
                {
                    b.OwnsMany("Fleet.Parts.Data.StockOutLine", "ApprovedLines", b1 =>
                        {
                            b1.Property<int>("StockOutId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            b1.Property<string>("PartUPC")
                                .IsRequired()
                                .HasMaxLength(31)
                                .HasColumnType("nvarchar(31)");

                            b1.Property<decimal>("Quantity")
                                .HasPrecision(27, 9)
                                .HasColumnType("decimal(27,9)");

                            b1.HasKey("StockOutId", "Id");

                            b1.ToTable("StockOut");

                            b1.ToJson("ApprovedLines");

                            b1.WithOwner()
                                .HasForeignKey("StockOutId");
                        });

                    b.OwnsMany("Fleet.Parts.Data.DocumentMetadata", "Documents", b1 =>
                        {
                            b1.Property<int>("StockOutId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(2043)
                                .HasColumnType("nvarchar(2043)");

                            b1.Property<string>("DocumentId")
                                .IsRequired()
                                .HasMaxLength(63)
                                .HasColumnType("nvarchar(63)");

                            b1.Property<string>("FileName")
                                .IsRequired()
                                .HasMaxLength(63)
                                .HasColumnType("nvarchar(63)");

                            b1.Property<string>("MimeType")
                                .IsRequired()
                                .HasMaxLength(31)
                                .HasColumnType("nvarchar(31)");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(63)
                                .HasColumnType("nvarchar(63)");

                            b1.HasKey("StockOutId", "Id");

                            b1.ToTable("StockOut");

                            b1.ToJson("Documents");

                            b1.WithOwner()
                                .HasForeignKey("StockOutId");
                        });

                    b.OwnsMany("Fleet.Parts.Data.StockOutLine", "RequestedLines", b1 =>
                        {
                            b1.Property<int>("StockOutId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            b1.Property<string>("PartUPC")
                                .IsRequired()
                                .HasMaxLength(31)
                                .HasColumnType("nvarchar(31)");

                            b1.Property<decimal>("Quantity")
                                .HasPrecision(27, 9)
                                .HasColumnType("decimal(27,9)");

                            b1.HasKey("StockOutId", "Id");

                            b1.ToTable("StockOut");

                            b1.ToJson("RequestedLines");

                            b1.WithOwner()
                                .HasForeignKey("StockOutId");
                        });

                    b.Navigation("ApprovedLines");

                    b.Navigation("Documents");

                    b.Navigation("RequestedLines");
                });

            modelBuilder.Entity("Fleet.Parts.Data.PartCategory", b =>
                {
                    b.Navigation("PartTypeCategories");
                });

            modelBuilder.Entity("Fleet.Parts.Data.PartType", b =>
                {
                    b.Navigation("PartTypeCategories");

                    b.Navigation("Parts");
                });
#pragma warning restore 612, 618
        }
    }
}
